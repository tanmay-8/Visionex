// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String
  username        String          @unique
  birthDate       DateTime        @map("birth_date")
  password        String?
  isVerified      Boolean         @default(false) @map("is_verified")
  profileImageUrl String?         @map("profile_image_url")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  ideas           Idea[]
  comments        Comment[]
  images          Image[]
  videos          Video[]
  upvotes         Upvote[]
  commentUpvotes  CommentUpvote[]
  followers       Follower[]      @relation("FollowerFollowers")
  following       Follower[]      @relation("FollowerFollowing")
  savedIdeas      SavedIdea[]     @relation("SavedBy")

  @@map("users")
}

model Idea {
  id            String      @id @default(cuid())
  title         String
  description   String
  visit         String?
  collaborators String[]
  ownerId       String      @map("owner_id")
  owner         User        @relation(fields: [ownerId], references: [id])
  images        Image[]
  videos        Video[]
  views         Int         @default(0)
  upvotes       Upvote[]
  upvotesCount  Int         @default(0) @map("upvotes_count")
  comments      Comment[]
  commentsCount Int         @default(0) @map("comments_count")
  category      String
  tags          String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  savedBy       SavedIdea[] @relation("SavedIdeas")
  email         String
  instagram     String
  twitter       String
  linkedin      String
  @@map("ideas")
}

model SavedIdea {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  ideaId    String   @map("idea_id")
  user      User     @relation("SavedBy", fields: [userId], references: [id], onDelete: Cascade)
  idea      Idea     @relation("SavedIdeas", fields: [ideaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, ideaId]) // Ensure uniqueness between user and idea pair
  @@map("saved_ideas")
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  follower    User     @relation("FollowerFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowerFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("followers")
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("password_resets")
}

model Comment {
  id             String          @id @default(cuid())
  userId         String          @map("user_id")
  text           String
  ideaId         String          @map("idea_id")
  commentId      String?         @map("comment_id")
  idea           Idea            @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent         Comment?        @relation("CommentReplies", fields: [commentId], references: [id], onDelete: Cascade)
  replies        Comment[]       @relation("CommentReplies")
  commentUpvotes CommentUpvote[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("comments")
}

model Video {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ideaId    String   @map("idea_id")
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("videos")
}

model Image {
  id        String   @id @default(cuid())
  name      String
  ownerId   String   @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ideaId    String   @map("idea_id")
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Upvote {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  ideaId    String   @map("idea_id")
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("upvotes")
}

model CommentUpvote {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  commentId String   @map("comment_id")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment_upvotes")
}
